# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserCount {
  comments: Int!
  posts: Int!
}

type User {
  id: ID!
  username: String!
  password: String!
  comments: [Comment!]
  posts: [Post!]
  _count: UserCount!
}

type Comment {
  id: ID!
  text: String!
  postId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  post: Post!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostCount {
  comments: Int!
}

type Post {
  id: ID!
  title: String!
  content: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  comments: [Comment!]
  user: User!
  _count: PostCount!
}

type AffectedRows {
  count: Int!
}

type PostCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type PostMinAggregate {
  id: String
  title: String
  content: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PostMaxAggregate {
  id: String
  title: String
  content: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PostGroupBy {
  id: String!
  title: String!
  content: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: PostCountAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

type AggregatePost {
  _count: PostCountAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

type CommentCountAggregate {
  id: Int!
  text: Int!
  postId: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CommentMinAggregate {
  id: String
  text: String
  postId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CommentMaxAggregate {
  id: String
  text: String
  postId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CommentGroupBy {
  id: String!
  text: String!
  postId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CommentCountAggregate
  _min: CommentMinAggregate
  _max: CommentMaxAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _min: CommentMinAggregate
  _max: CommentMaxAggregate
}

type UserCountAggregate {
  id: Int!
  username: Int!
  password: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  username: String
  password: String
}

type UserMaxAggregate {
  id: String
  username: String
  password: String
}

type UserGroupBy {
  id: String!
  username: String!
  password: String!
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type Query {
  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): Post!
  findUniquePost(where: PostWhereUniqueInput!): Post!
  listPosts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput!], by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: PostCountAggregateInput, _min: PostMinAggregateInput, _max: PostMaxAggregateInput): [PostGroupBy!]!
  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, _count: PostCountAggregateInput, _min: PostMinAggregateInput, _max: PostMaxAggregateInput): AggregatePost!
  findFirstComment(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: [CommentScalarFieldEnum!]): Comment!
  findUniqueComment(where: CommentWhereUniqueInput!): Comment!
  listComments(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: [CommentScalarFieldEnum!]): [Comment!]!
  groupByComment(where: CommentWhereInput, orderBy: [CommentOrderByWithAggregationInput!], by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: CommentCountAggregateInput, _min: CommentMinAggregateInput, _max: CommentMaxAggregateInput): [CommentGroupBy!]!
  aggregateComment(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, _count: CommentCountAggregateInput, _min: CommentMinAggregateInput, _max: CommentMaxAggregateInput): AggregateComment!
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  findUniqueUser(where: UserWhereUniqueInput!): User!
  listUsers(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput!], by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: UserCountAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): [UserGroupBy!]!
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, _count: UserCountAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): AggregateUser!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: UuidFilter
  title: StringFilter
  content: StringFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  comments: CommentListRelationFilter
  user: UserRelationFilter
}

input UuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedUuidFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: UuidFilter
  text: StringFilter
  postId: UuidFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  post: PostRelationFilter
  user: UserRelationFilter
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: UuidFilter
  username: StringFilter
  password: StringFilter
  comments: CommentListRelationFilter
  posts: PostListRelationFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  comments: CommentOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  comments: CommentOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostWhereUniqueInput {
  id: String
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  title: StringFilter
  content: StringFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  comments: CommentListRelationFilter
  user: UserRelationFilter
}

enum PostScalarFieldEnum {
  id
  title
  content
  userId
  createdAt
  updatedAt
}

input PostOrderByWithAggregationInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
}

input PostCountOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostMaxOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostMinOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  id: UuidWithAggregatesFilter
  title: StringWithAggregatesFilter
  content: StringWithAggregatesFilter
  userId: UuidWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UuidWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  mode: QueryMode
  not: NestedUuidWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedUuidWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedUuidWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input PostCountAggregateInput {
  id: Boolean
  title: Boolean
  content: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input PostMinAggregateInput {
  id: Boolean
  title: Boolean
  content: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input PostMaxAggregateInput {
  id: Boolean
  title: Boolean
  content: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input CommentOrderByWithRelationInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  post: PostOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input CommentWhereUniqueInput {
  id: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  text: StringFilter
  postId: UuidFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  post: PostRelationFilter
  user: UserRelationFilter
}

enum CommentScalarFieldEnum {
  id
  text
  postId
  userId
  createdAt
  updatedAt
}

input CommentOrderByWithAggregationInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
}

input CommentCountOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentMaxOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentMinOrderByAggregateInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  id: UuidWithAggregatesFilter
  text: StringWithAggregatesFilter
  postId: UuidWithAggregatesFilter
  userId: UuidWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CommentCountAggregateInput {
  id: Boolean
  text: Boolean
  postId: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input CommentMinAggregateInput {
  id: Boolean
  text: Boolean
  postId: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input CommentMaxAggregateInput {
  id: Boolean
  text: Boolean
  postId: Boolean
  userId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input UserWhereUniqueInput {
  id: String
  username: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  password: StringFilter
  comments: CommentListRelationFilter
  posts: PostListRelationFilter
}

enum UserScalarFieldEnum {
  id
  username
  password
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: UuidWithAggregatesFilter
  username: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
}

input UserCountAggregateInput {
  id: Boolean
  username: Boolean
  password: Boolean
  _all: Boolean
}

input UserMinAggregateInput {
  id: Boolean
  username: Boolean
  password: Boolean
}

input UserMaxAggregateInput {
  id: Boolean
  username: Boolean
  password: Boolean
}

type Mutation {
  createPost(data: PostCreateInput!): Post
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRows
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPost(where: PostWhereInput): AffectedRows
  createComment(data: CommentCreateInput!): Comment
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRows
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComment(where: CommentWhereInput): AffectedRows
  createUser(data: UserCreateInput!): User
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRows
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): AffectedRows
}

input PostCreateInput {
  id: String
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  comments: CommentCreateNestedManyWithoutPostInput
  user: UserCreateNestedOneWithoutPostsInput!
}

input CommentCreateNestedManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: String
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutCommentsInput!
}

input UserCreateNestedOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: String
  username: String!
  password: String!
  posts: PostCreateNestedManyWithoutUserInput
}

input PostCreateNestedManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutUserInput {
  id: String
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  comments: CommentCreateNestedManyWithoutPostInput
}

input PostCreateOrConnectWithoutUserInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutUserInput!
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyUserInput {
  id: String
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutCommentsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentsInput!
}

input CommentCreateOrConnectWithoutPostInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutPostInput!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyPostInput {
  id: String
  text: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: String
  username: String!
  password: String!
  comments: CommentCreateNestedManyWithoutUserInput
}

input CommentCreateNestedManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutUserInput {
  id: String
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateNestedOneWithoutCommentsInput!
}

input PostCreateNestedOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: String
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCommentsInput!
}

input CommentCreateOrConnectWithoutUserInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutUserInput!
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  id: String
  text: String!
  postId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutPostsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostsInput!
}

input PostCreateManyInput {
  id: String
  title: String!
  content: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostNestedInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input CommentUpdateManyWithoutPostNestedInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  create: UserCreateWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsInput!
  create: UserCreateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCommentsInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
}

input PostUpdateManyWithoutUserNestedInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserInput!
  create: PostCreateWithoutUserInput!
}

input PostUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostNestedInput
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: UuidFilter
  title: StringFilter
  content: StringFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  where: UserWhereInput
  data: UserUpdateWithoutCommentsInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  id: UuidFilter
  text: StringFilter
  postId: UuidFilter
  userId: UuidFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsInput!
  create: UserCreateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
}

input CommentUpdateManyWithoutUserNestedInput {
  create: [CommentCreateWithoutUserInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserInput!
  create: CommentCreateWithoutUserInput!
}

input CommentUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
}

input PostUpdateOneRequiredWithoutCommentsNestedInput {
  create: PostCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateToOneWithWhereWithoutCommentsInput
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsInput!
  create: PostCreateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpdateWithoutCommentsInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateToOneWithWhereWithoutCommentsInput {
  where: PostWhereInput
  data: PostUpdateWithoutCommentsInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  where: UserWhereInput
  data: UserUpdateWithoutPostsInput!
}

input CommentCreateInput {
  id: String
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateManyInput {
  id: String
  text: String!
  postId: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentUpdateInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input UserCreateInput {
  id: String
  username: String!
  password: String!
  comments: CommentCreateNestedManyWithoutUserInput
  posts: PostCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  id: String
  username: String!
  password: String!
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutUserNestedInput
  posts: PostUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}